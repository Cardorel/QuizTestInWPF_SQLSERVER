using Prism.Commands;using Prism.Mvvm;using ProjectKoursova.Dialogs;using ProjectKoursova.Models;using ProjectKoursova.Views;using System;using System.Collections.Generic;using System.Collections.ObjectModel;using System.Linq;using System.Security;using System.Text;using System.Threading.Tasks;using System.Windows;using System.Windows.Controls;using System.Windows.Input;namespace ProjectKoursova.ViewModels{    class RegistrationViewModel : BindableBase, IRegistration    {        private ICommand loginCommand;        private ICommand hiddenCommand;        private ICommand visibleCommand;        //Data user Registration        private int userId;        private string username;        private int memberId;        private string email;        private string emailOrUsername;        private ICommand logoutCommand;        private SecureString password;        private string feedback;        private Member selectedItem;        private string showVisibility = "Visible";        private string hiddenVisibility = "Hidden";        public ObservableCollection<Registration> Registrations        {            get            {                using (var db = new KoursovaEntities2())                {                    return new ObservableCollection<Registration>(db.Registrations);                }            }        }        public ObservableCollection<Member> Members        {            get            {                using (var db = new KoursovaEntities2())                {                    return new ObservableCollection<Member>(db.Members);                }            }        }        public int UserId { get => userId; set => SetProperty(ref userId, value); }        public string Username { get => username; set => SetProperty(ref username, value); }        public int MemberId { get => memberId; set => SetProperty(ref memberId, value); }        public string Email { get => email; set => SetProperty(ref email, value); }        public SecureString Password { get => password; set => SetProperty(ref password, value); }        public string ShowVisibility { get => showVisibility ; set => SetProperty(ref showVisibility , value); }        public string HiddenVisibility { get => hiddenVisibility; set => SetProperty(ref hiddenVisibility, value); }        public string EmailOrUsername { get => emailOrUsername; set => SetProperty(ref emailOrUsername, value); }        public ICommand LogoutCommand        {            get => logoutCommand ?? (logoutCommand = new DelegateCommand(() =>            {                if (isValid())                {                    if (CheckLoginEmailAndPassword())                    {                        var vm = new AdminAddQuestionViewModel();                        var ad = new AdminViewModel();                        var name = Registrations.Where(e => e.email == EmailOrUsername || e.username == EmailOrUsername).FirstOrDefault();                        ad.Username = name;                        ad.IsTeacher = name.memberId != 1;                        Username = name.username;                        UserId = name.registrationId;                        DialogFactory.ShowAdminDialog(ad);                                            }                    else                    {                        feedback = "Something went wrong , please try again";                    }                    EmailOrUsername = "";                    password.Clear();                }            }));        }        private bool CheckLoginEmailAndPassword()        {                       var email_username = Registrations.FirstOrDefault(e => e.email == EmailOrUsername || e.username == EmailOrUsername);            if (email_username == null)
            {
                return false;
            }            return (email_username.passwordReg == password.GetString());
        }        private bool isValid()        {            if (!string.IsNullOrWhiteSpace(emailOrUsername) || !string.IsNullOrWhiteSpace(password.GetString()))            {                return true;            }            return false;        }        public ICommand LoginCommand        {            get => loginCommand ?? (loginCommand = new DelegateCommand(() =>            {                using (var db = new KoursovaEntities2())                {                    if (                 (!string.IsNullOrWhiteSpace(username) ||                  !string.IsNullOrWhiteSpace(email)  ||                 !string.IsNullOrWhiteSpace(password.GetString()))                 )                    {                        db.Registrations.Add(new Registration()                        {                            username = username,                            memberId = memberId,                            passwordReg = password.GetString(),                            email = email                        });                        db.SaveChanges();                        RaisePropertyChanged(nameof(Registrations));                        MessageBox.Show("Succefull registration!");                    }                    else                    {                        MessageBox.Show("Failled registration!");                    }                    Username = "";                    Email = "";                    password.Clear();                }            }));        }        public ICommand HiddenVisibilityCommand         {             get => hiddenCommand ?? (hiddenCommand = new DelegateCommand(() =>             {                ShowVisibility = "Hidden";                HiddenVisibility = "Visible";            }));         }        public ICommand ShowVisibilityCommand        {            get => visibleCommand ?? (visibleCommand = new DelegateCommand(() =>            {                ShowVisibility = "Visble";                HiddenVisibility = "Hidden";            }));        }        public Member SelectedItem { get => selectedItem; set => SetProperty(ref selectedItem , value); }    }}